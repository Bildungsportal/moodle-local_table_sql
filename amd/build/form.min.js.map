{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["define(\n    ['jquery', 'core/ajax', 'core/modal_factory', 'core/modal_events', 'core/notification'],\n    function ($, Ajax, ModalFactory, ModalEvents, Notification){\n        return {\n            debug: false,\n            /**\n             * load the form into a modal by use of ajax.\n             * @param {DOMobject} sender\n             * @param {string} formid\n             */\n            loadModal: function(sender, formid) {\n                let SELF = this;\n\n                // Parameters needed to construct the table_sql_form.\n                let cb = $(sender).closest('div.table_sql_form_controlbox');\n                let constructor = cb.data('constructor');\n                constructor = atob(cb.data('constructor'));\n                let params = {\n                    'classname': atob(cb.data('classname')),\n                    'constructor': JSON.parse(constructor),\n                    'col': $(sender).closest('.table-sql-modal').find('.table-sql-modal-value').data('col'),\n                    'formid': formid\n                };\n\n                // Values needed to construct the moodleform.\n                let pane = $(sender).closest('.table-sql-modal');\n                params['rowids'] = {};\n\n                $(pane).find('.table-sql-modal-rowids .dataset').each(function(){\n                    let field = $(this).data('field');\n                    let value = $(this).html();\n                    params['rowids'][field] = value;\n                });\n                if (SELF.debug) {\n                    console.log('Loading modal for params', params);\n                }\n                let ajaxdata = { 'rowdata': JSON.stringify(params) };\n                Ajax.call([{\n                    methodname: 'local_table_sql_receiver',\n                    args: ajaxdata,\n                    done: function (response) {\n                        if (SELF.debug) {\n                            console.log('Response', response);\n                        }\n                        ModalFactory.create(\n                            {\n                                body: response.form,\n                                large: true,\n                                removeOnClose: true,\n                                title: $(pane).data('title'),\n                                type: ModalFactory.types.SAVE_CANCEL,\n                            }\n                        ).then(\n                            function (modal) {\n                                SELF.updateModal(params, modal, response, pane);\n                                modal.show();\n                                modal.getRoot().on(ModalEvents.save, (e) => {\n                                    e.preventDefault();\n                                    SELF.send(params, modal, pane);\n                                });\n                            }\n                        );\n                    },\n                    fail: Notification.exception\n                }]);\n            },\n            /**\n             * Update modal if a form was loaded into it.\n             * @param {object} params\n             * @param {object} modal\n             * @param {object} response\n             * @param {DOMobject} pane\n             */\n            updateModal: function(params, modal, response, pane) {\n                let SELF = this;\n                // Update modal content or close it.\n                if (response.form == '') {\n                    $(modal.getRoot()).find('.modal-body').html('');\n                    $(pane).replaceWith($(response.colreplace));\n                    modal.hide();\n                } else if (response.form != '') {\n                    $(modal.getRoot()).find('.modal-body').html(response.form);\n                }\n                // Hide fields we do not need.\n                let showfields = JSON.parse(atob($(pane).data('fields')));\n                if (SELF.debug) {\n                    console.log('showfields', showfields);\n                }\n                let form = $(modal.getRoot()).find('form');\n                $(form).find('#id_submitbutton').closest('.form-group.row').addClass('hidden');\n                if (showfields.length > 0) {\n                    $(form).find('[name]').each(function () {\n                        let name = $(this).attr('name');\n                        if (showfields.indexOf(name) === -1) {\n                            $(this).closest('.form-group.row').addClass('hidden');\n                        }\n                    });\n                }\n                // Run any required javascript.\n                if (typeof response.pageendcode !== 'undefined') {\n                    let script = $('<script>').data('added', Date.now()).html(response.pageendcode);\n                    if (SELF.debug) {\n                        console.log('appending page end code', script);\n                    }\n                    $('body').append(script);\n                }\n            },\n            /**\n             * Actually send the data. Depending on the result. update the form or close the modal and update the cell.\n             * @param {object} params\n             * @param {object} modal\n             * @param {DOMobject} pane\n             *\n             *\n             */\n            send: function(params, modal, pane) {\n                let SELF = this;\n                let sendparams = params;\n                let form = $(modal.getRoot()).find('form');\n                let formdata = Object.fromEntries(new FormData(form[0]).entries());\n                if (SELF.debug) {\n                    console.log('Sending', formdata);\n                }\n                sendparams['formdata'] = { 'submitbutton': 1 };\n                Object.keys(formdata).forEach(function(key) {\n                    sendparams['formdata'][key] = formdata[key];\n                });\n\n                if (SELF.debug) {\n                    console.log('Store row', sendparams);\n                }\n                sendparams = { 'rowdata': JSON.stringify(sendparams) };\n                Ajax.call([{\n                    methodname: 'local_table_sql_receiver',\n                    args: sendparams,\n                    done: function (response) {\n                        if (SELF.debug) {\n                            console.log('Response', response);\n                        }\n                        SELF.updateModal(params, modal, response, pane);\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n        };\n    }\n);\n"],"names":["define","$","Ajax","ModalFactory","ModalEvents","Notification","debug","loadModal","sender","formid","SELF","this","cb","closest","constructor","data","atob","params","JSON","parse","find","pane","each","field","value","html","console","log","ajaxdata","stringify","call","methodname","args","done","response","create","body","form","large","removeOnClose","title","type","types","SAVE_CANCEL","then","modal","updateModal","show","getRoot","on","save","e","preventDefault","send","fail","exception","replaceWith","colreplace","hide","showfields","addClass","length","name","attr","indexOf","pageendcode","script","Date","now","append","sendparams","formdata","Object","fromEntries","FormData","entries","keys","forEach","key"],"mappings":"AAAAA,8BACI,CAAC,SAAU,YAAa,qBAAsB,oBAAqB,sBACnE,SAAUC,EAAGC,KAAMC,aAAcC,YAAaC,oBACnC,CACHC,OAAO,EAMPC,UAAW,SAASC,OAAQC,YACpBC,KAAOC,KAGPC,GAAKX,EAAEO,QAAQK,QAAQ,iCACvBC,YAAcF,GAAGG,KAAK,eAC1BD,YAAcE,KAAKJ,GAAGG,KAAK,oBACvBE,OAAS,WACID,KAAKJ,GAAGG,KAAK,0BACXG,KAAKC,MAAML,iBACnBb,EAAEO,QAAQK,QAAQ,oBAAoBO,KAAK,0BAA0BL,KAAK,cACvEN,QAIVY,KAAOpB,EAAEO,QAAQK,QAAQ,oBAC7BI,OAAM,OAAa,GAEnBhB,EAAEoB,MAAMD,KAAK,oCAAoCE,MAAK,eAC9CC,MAAQtB,EAAEU,MAAMI,KAAK,SACrBS,MAAQvB,EAAEU,MAAMc,OACpBR,OAAM,OAAWM,OAASC,SAE1Bd,KAAKJ,OACLoB,QAAQC,IAAI,2BAA4BV,YAExCW,SAAW,SAAaV,KAAKW,UAAUZ,SAC3Cf,KAAK4B,KAAK,CAAC,CACPC,WAAY,2BACZC,KAAMJ,SACNK,KAAM,SAAUC,UACRxB,KAAKJ,OACLoB,QAAQC,IAAI,WAAYO,UAE5B/B,aAAagC,OACT,CACIC,KAAMF,SAASG,KACfC,OAAO,EACPC,eAAe,EACfC,MAAOvC,EAAEoB,MAAMN,KAAK,SACpB0B,KAAMtC,aAAauC,MAAMC,cAE/BC,MACE,SAAUC,OACNnC,KAAKoC,YAAY7B,OAAQ4B,MAAOX,SAAUb,MAC1CwB,MAAME,OACNF,MAAMG,UAAUC,GAAG7C,YAAY8C,MAAOC,IAClCA,EAAEC,iBACF1C,KAAK2C,KAAKpC,OAAQ4B,MAAOxB,aAKzCiC,KAAMjD,aAAakD,cAU3BT,YAAa,SAAS7B,OAAQ4B,MAAOX,SAAUb,UACvCX,KAAOC,KAEU,IAAjBuB,SAASG,MACTpC,EAAE4C,MAAMG,WAAW5B,KAAK,eAAeK,KAAK,IAC5CxB,EAAEoB,MAAMmC,YAAYvD,EAAEiC,SAASuB,aAC/BZ,MAAMa,QACkB,IAAjBxB,SAASG,MAChBpC,EAAE4C,MAAMG,WAAW5B,KAAK,eAAeK,KAAKS,SAASG,UAGrDsB,WAAazC,KAAKC,MAAMH,KAAKf,EAAEoB,MAAMN,KAAK,YAC1CL,KAAKJ,OACLoB,QAAQC,IAAI,aAAcgC,gBAE1BtB,KAAOpC,EAAE4C,MAAMG,WAAW5B,KAAK,WACnCnB,EAAEoC,MAAMjB,KAAK,oBAAoBP,QAAQ,mBAAmB+C,SAAS,UACjED,WAAWE,OAAS,GACpB5D,EAAEoC,MAAMjB,KAAK,UAAUE,MAAK,eACpBwC,KAAO7D,EAAEU,MAAMoD,KAAK,SACU,IAA9BJ,WAAWK,QAAQF,OACnB7D,EAAEU,MAAME,QAAQ,mBAAmB+C,SAAS,kBAKpB,IAAzB1B,SAAS+B,YAA6B,KACzCC,OAASjE,EAAE,YAAYc,KAAK,QAASoD,KAAKC,OAAO3C,KAAKS,SAAS+B,aAC/DvD,KAAKJ,OACLoB,QAAQC,IAAI,0BAA2BuC,QAE3CjE,EAAE,QAAQoE,OAAOH,UAWzBb,KAAM,SAASpC,OAAQ4B,MAAOxB,UACtBX,KAAOC,KACP2D,WAAarD,OACboB,KAAOpC,EAAE4C,MAAMG,WAAW5B,KAAK,QAC/BmD,SAAWC,OAAOC,YAAY,IAAIC,SAASrC,KAAK,IAAIsC,WACpDjE,KAAKJ,OACLoB,QAAQC,IAAI,UAAW4C,UAE3BD,WAAU,SAAe,cAAkB,GAC3CE,OAAOI,KAAKL,UAAUM,SAAQ,SAASC,KACnCR,WAAU,SAAaQ,KAAOP,SAASO,QAGvCpE,KAAKJ,OACLoB,QAAQC,IAAI,YAAa2C,YAE7BA,WAAa,SAAapD,KAAKW,UAAUyC,aACzCpE,KAAK4B,KAAK,CAAC,CACPC,WAAY,2BACZC,KAAMsC,WACNrC,KAAM,SAAUC,UACRxB,KAAKJ,OACLoB,QAAQC,IAAI,WAAYO,UAE5BxB,KAAKoC,YAAY7B,OAAQ4B,MAAOX,SAAUb,OAE9CiC,KAAMjD,aAAakD"}